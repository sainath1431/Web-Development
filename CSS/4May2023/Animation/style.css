div{
    height: 100px;
    width: 100px;
    background-color: red;

    /* Attachement of animation to element div. */
    animation-name: colorchanges;

    /* humara element apne original position ke relative change ho sakta hai. */

    position: relative;

    /* animation starting bahut kam time main complete hota hai jo humare aakho dikh nahi pata hai toh ye problem solve karne ke liye hume animation duration set karna padtha hai jo ki animation start honese animation end hone tak ka duration hota hai */

    animation-duration: 10s;

    /* apun ko page load hone ke baad kuch time baad animation ko run karna hai toh apun animation delay ka use karega jis ke karan page load hone ke baad given time ke baad apun animation on that element run hoga and end of the animation this comes in its original position.*/

    animation-delay:3s;

    /* animation iteration count is the property which is used to declared that how many time that animation can be run. 
    Here we run animation infinite also only we have to declear value as infinite.*/
    /* for infintie time
    animation-iteration-count: infinitw; */

    /* animation-iteration-count: infinite; */

    /* kisi bhi point ko kisi bhi specific type ki animation chahiye toh aap animation-timging-count ka use karna padega. */


    /* In this direction of animation is reverse means the 100% animation part start first and end of the animation have part of 0%. */
    
    /* animation-direction:reverse; */

    /* In this animation direction of animation goes first in reverse order and then goes into reverse order is keep that flow will be continues. */

    /* animation-direction:alternate-reverse; */

    /* animation start honese pahile and animation start hone ke baad kya state honi chahiye ese animation-fill-mode set karte hai */   
    /* following are the values of the animation-fill-mode */

    /* None : Default value.Animation will not appy any styles to the element before or after it is executing.Animation

    forward : The element will retain the style values that is et by the last keyframe (depends on animation-direction and animation-iteration-count).

    backwards : The element will retain the style values what is set by the first keyframe (depends on animation-direction),and retain this during the animation-delay period.

    both-the animation will follow the rules for both forwards and backwords, extending animation properties properties in both directions. */

    animation-fill-mode: both;

    /* speed Curve : animation kitna smoothly run ho raha hai */

    /* The animation timinng function property specify speed of curve of animation:  */

    /* ease : specifies an animations with a slow start, then fast, then end slowly(this is default.)

    linear : specifies an animation with the same speed form start to end.

    ease-in : Specifies an animation with a slow start.

    ease-out: Specifies an animation with slow end.

    ease-in-out: Specifies an animation with a slow start and end.

    Cubic-bezier(n,n,n,n):
    Lets you define your own values in a cubic-bezier function. */

    /* For above syntax ke technically apne pass ek shorthand exist karta jo all cover in one syntax . */

    animation: colorchanges 8s linear 2s  infinite reverse; 
}



/* 

#ease{
    animation-timing-function: eaes;
}

#linear{
    animation-timing-function: linear;
}

#ease-in{
    animation-timing-function: ease-in;
}

#ease-out{
    animation-timing-function: ease-out;
} */




/* To define keyframe or animation ka trasition will be defining. */

/* keyframes : it is the processes of at the starting point how was the animation see, at this process how the animation see and the end of the process how the animation can see this processes known as keyframes. */

/* keyframe se hum design banate hai esko kisi element apply karna hai toh us element pe attach karna padega. */


@keyframes colorchanges{
    /* at starting position how is seen by using "from" . and at ending position how is seen by using "to" keyword.*/


    /* from {
        background-color: rgb(77, 25, 233);
        top:0px;
        left:0px;
    }
    to  {
        background-color: rgb(183, 198, 15);
        top:0px;
        left:200px;
    } */

    /* Animation end hoti hai toh element apne original position aata hai. */


    /* aub hum its from and to divide karege into 4 equal parts to apply 4 animation at 4 distinct position. so we divided in to 4 equal part and we write timeofframe in terms of percentage as below example show. */


    0% {
        background-color: rgb(77, 25, 233);
        top:0px;
        left:0px;
    }
    25% {
        background-color: rgb(183, 198, 15);
        top:0px;
        left:200px;
    }

    50%{
        background-color: black;
        top:200px;
        left:200px;
    }

    75%{
        background-color: red;
        top:200px;
        right:0px;

    }

    100%{
        background-color: green;
        top:0px;
        left:0px;
    }
}